name: Deploy to ECR and update Lambda

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_REPO_NAME: ${{ secrets.AWS_REPO_NAME }}
  IMAGE_TAG: latest
  LAMBDA_FUNCTION_NAME: ${{ secrets.AWS_LAMBDA_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v2
        
       # Login to Amazon ECR using AWS access keys
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
#           role-to-assume: ${{ secrets.AWS_ROLE }}   

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, Tag, and Push Docker image to Amazon ECR
        id: push-image
        run: |
          echo "SLACK_TOKEN = ${{ secrets.SLACK_TOKEN }}\r\n" >> .env
          echo "DISCORD_URL = \"${{ secrets.DISCORD_URL }}\"\r\n\" >> .env
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }} .
          echo "${{ steps.login-ecr.outputs.registry }}"
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
        # echo "::set-output name=image-uri::${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}"
        # docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
        # echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Set image uri 
        id: set-uri
        run: |
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}"
          echo "${{ steps.set-uri.outputs.image-uri }}"

      # Build the Docker image
      # - name: Build Docker image
      #   id: build-image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: false
      #     tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}

      # # Push the Docker image to Amazon ECR
      # - name: Push Docker image to Amazon ECR
      #   id: push-image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
      #     registry: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
      #     # username: AWS
      #     # password: ${{ steps.login-ecr.outputs.password }}

      - name: Update Lambda function
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }}
          function_name: ${{ env.LAMBDA_FUNCTION_NAME }}
          image_uri: ${{ steps.set-uri.outputs.image-uri }}
